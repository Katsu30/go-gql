package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"

	"github.com/Katsu30/go-gql/graph/model"
	"github.com/Katsu30/go-gql/internal"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// ID is the resolver for the id field.
func (r *todoResolver) ID(ctx context.Context, obj *model.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Text is the resolver for the text field.
func (r *todoResolver) Text(ctx context.Context, obj *model.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: Text - text"))
}

// Done is the resolver for the done field.
func (r *todoResolver) Done(ctx context.Context, obj *model.Todo) (bool, error) {
	panic(fmt.Errorf("not implemented: Done - done"))
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Name is the resolver for the name field.
func (r *userResolver) Name(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// Mutation returns internal.MutationResolver implementation.
func (r *Resolver) Mutation() internal.MutationResolver { return &mutationResolver{r} }

// Query returns internal.QueryResolver implementation.
func (r *Resolver) Query() internal.QueryResolver { return &queryResolver{r} }

// Todo returns internal.TodoResolver implementation.
func (r *Resolver) Todo() internal.TodoResolver { return &todoResolver{r} }

// User returns internal.UserResolver implementation.
func (r *Resolver) User() internal.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
